name: "Vprofile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request: 
    branches:
      - main
    paths:
      - terraform/** #we trigger the workflow whener we have a changes in terraform/**

#env variables are available globally in the workflows , secrets stay secure , we don't have to repeat them in every workflow
env:
#credentials for deployment in AWS 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#S3 bucket for the Terraform state  
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: eu-north-1
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply terraform code changes"
    #runners are containers provided by github actions 
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout the source code
        # Github actions fetch the workflow and upload it to github repo
        uses: actions/checkout@v4 

      - name: SEtup Terraform with specified runner version
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=${BUCKET_TF_STATE}" 

      - name: Terraform format 
        id: format
        run : terraform fmt -check

      - name: Terraform validate
        id: validate 
        run: terraform validate

      - name: Terraform plan
        id: plan 
        # here we gonna store the plan in a  file and use this file to apply the changes 
        # because idf we did terraform apply directly , we gonna have parallel executions 
        run: terraform plan -no-color -input=false -out planfile 
        continue-on-error: true 

        # we want to contoll the stop of the flow , to have acess to logs and error plan 
      - name: Terraform plan status 
        if: steps.plan.outcome == 'failure'
        run: exit 1